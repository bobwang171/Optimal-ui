(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{328:function(t,n,o){"use strict";o.r(n);var s=o(15),a=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"toast-弹出提示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#toast-弹出提示"}},[t._v("#")]),t._v(" Toast - 弹出提示")]),t._v(" "),n("h2",{attrs:{id:"预览"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预览"}},[t._v("#")]),t._v(" 预览")]),t._v(" "),n("ClientOnly",[n("toast-demos")],1),t._v(" "),n("h2",{attrs:{id:"使用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <i-button @click=\"auto\">设置 zIndex</i-button>&nbsp;&nbsp;\n    <i-button @click=\"auto\">会自动关闭</i-button>&nbsp;&nbsp;\n    <i-button @click=\"auto\">点击按钮才关闭</i-button>&nbsp;&nbsp;\n    <i-button @click=\"auto\">支持 HTML 语法</i-button>&nbsp;&nbsp;\n    <br>\n    <i-button @click=\"top\">上方弹出</i-button>\n    <i-button @click=\"middle\">中间弹出</i-button>\n    <i-button @click=\"bottom\">下方弹出</i-button>\n  </div>\n</template>\n<script>\n  import Vue from 'vue'\n  import Toast from '../../../src/Toast'\n  import Button from '../../../src/Button'\n  import plugin from '../../../src/plugin'\n  Vue.use(plugin)\n  export default {\n    components: {'o-toast': Toast, 'o-button': Button},\n    methods: {\n      auto() {\n        this.$toast('我是 toast 内容', {\n          zIndex:30,\n          autoClose: 5,\n          closeButton: {\n          text:'确定',\n            callback:()=>{\n            console.log('回调的输出')\n            }\n          },\n          enableHTML:true\n        })\n      },\n      top(){\n        this.$toast('我是 toast 内容', { position: 'top' })\n      },\n      middle(){\n        this.$toast('我是 toast 内容', { position: 'middle' })\n      },\n      bottom(){\n        this.$toast('我是 toast 内容', { position: 'bottom' })\n      },\n    }\n  }\n<\/script>\n")])])]),n("h2",{attrs:{id:"选项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[t._v("#")]),t._v(" 选项")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("zIndex")]),n("br"),t._v("\n此选项用于设定 Toast 组件在当前堆叠上下文中的堆叠层级。默认为20。(这是因为再使用 vuepress 编写文档时发现值为 20 才有效。)\n若你的项目不可见 Toast 组件，尝试传入一个 zIndex 试试。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("autoClose")]),t._v(" "),n("br"),t._v("\n此选项可以设定 Toast 自动关闭的延时。单位为“ 秒 ”，默认延时 5 秒后自动关闭。")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <i-button @click=\"auto\">自动关闭的 Toast</i-button>\n  </div>\n</template>\n<script>\n  import Vue from 'vue'\n  import Toast from '../../../src/Toast'\n  import Button from '../../../src/Button'\n  import plugin from '../../../src/plugin'\n  Vue.use(plugin)\n  export default {\n    components: { 'i-toast': Toast, 'i-button': Button },\n    methods: {\n      auto() { this.$toast('我是 toast 内容', { autoClose: 5, }) }\n    }\n  }\n<\/script>\n")])])]),n("ul",[n("li",[n("code",[t._v("closeButton")]),n("br"),t._v("\nToast 组件的右侧按钮文本可编辑，并且支持传入一个回调。 "),n("code",[t._v("closeButton")]),t._v(" 选项接收一个对象。对象包括 text 与 callback 属性。用于设定按钮的文本与回调。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n<template>\n  <div>\n    <i-button @click=\"auto\">点我</i-button>\n  </div>\n</template>\n<script>\n  import Vue from 'vue'\n  import Toast from '../../../src/Toast'\n  import Button from '../../../src/Button'\n  import plugin from '../../../src/plugin'\n\n  Vue.use(plugin)\n  export default {\n    components: {'o-toast': Toast, 'o-button': Button},\n    methods: {\n      auto() {\n        this.$toast('我是 toast 内容', \n         {autoClose: 5, closeButton: { text:'确定', callback:()=>{ console.log('回调的输出') } } }\n        )\n      }\n    }\n  }\n<\/script>\n")])])]),n("ul",[n("li",[n("p",[n("code",[t._v("enableHtml")]),n("br"),t._v("\nToast 组件还支持 HTML 语法，该功能默认关闭，你需要传递一个 enableHTML 参数来开启它, "),n("code",[t._v("enableHtml:true")]),t._v(" 。 开启后就可以在 Toast 内容区域写 HTML 语法。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("position")]),n("br"),t._v("\n可以设定 Toast 弹出的位置 ，支持 top, middle, bottom 三个值。")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("this.$toast('我是 toast 内容', { position: 'top' })\n")])])])],1)}),[],!1,null,null,null);n.default=a.exports}}]);